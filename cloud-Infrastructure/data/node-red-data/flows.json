[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3e315f997a180917",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a012a58c042fd2a9",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "031fa5fc0fd5aafd",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a4bf4391a43c73d8",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "037aecdc6926ce9a",
        "type": "mqtt-broker",
        "name": "IdC",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f5279b01.b328d8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "72f114b81c497b2b",
        "type": "ui_group",
        "name": "dash1",
        "tab": "",
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "85ee7547c83fb2fb",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 460,
        "wires": []
    },
    {
        "id": "966177e57dbd7d21",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "idc/iris",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "037aecdc6926ce9a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 640,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "b5f343a20278eea1",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "Predict Service",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://app:8000/predict",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 420,
        "y": 460,
        "wires": [
            [
                "85ee7547c83fb2fb"
            ]
        ]
    },
    {
        "id": "79f05988ab6ded28",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "55d85d4957c06c5e"
            ]
        ]
    },
    {
        "id": "305b9fa387c77222",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 220,
        "wires": []
    },
    {
        "id": "55d85d4957c06c5e",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "Health Service",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://app:8000/health",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "305b9fa387c77222"
            ]
        ]
    },
    {
        "id": "bd0817e58c32174a",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-KNN",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-KNN\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "15dc23581e715dea",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-GNB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-GNB\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "1b4c1fc9240a787b",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-SVC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-SVC\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "5d7fa6dbca76c986",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-DT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-DT\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "fa76cd47cd404c07",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-LDA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-LDA\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "e2c8d2430fd78714",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-LR",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-LR\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "3356cfc43df2ac06",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Fitness-LDA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"fitness-LDA\"},{\"acceleration_x\":0.265,\"acceleration_y\":-0.7814,\"acceleration_z\":-0.0076,\"gyro_x\":-0.059,\"gyro_y\":0.0325,\"gyro_z\":-2.9296}]",
        "payloadType": "json",
        "x": 370,
        "y": 680,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "184928afc794ea46",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "idc/fitness",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "037aecdc6926ce9a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 340,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "ca3b2e0596e19eb3",
        "type": "mqtt in",
        "z": "3e315f997a180917",
        "name": "",
        "topic": "idc/fc15",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "037aecdc6926ce9a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 60,
        "wires": [
            [
                "4e4532788782c67a"
            ]
        ]
    },
    {
        "id": "4e4532788782c67a",
        "type": "http request",
        "z": "3e315f997a180917",
        "name": "Predict Service",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://app:8000/predict",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 240,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f2a03e5d9015a12d",
        "type": "debug",
        "z": "3e315f997a180917",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 320,
        "wires": []
    },
    {
        "id": "cea13b5b1952c19f",
        "type": "inject",
        "z": "3e315f997a180917",
        "name": "START",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "9ffe8dafcd435f28"
            ]
        ]
    },
    {
        "id": "9f7413c6b42a4d86",
        "type": "function",
        "z": "3e315f997a180917",
        "name": "function 1",
        "func": "let currentActivity = [];\nlet lastDate = null;\nlet lastTime = null;\nlet lastActivity = null;\n\nfunction processActivity(activityData) {\n    const date = activityData.date;\n    const time = activityData.time;\n    const activity = activityData.activity;\n\n    if (!lastDate || !lastTime || !lastActivity) {\n        // Se for a primeira linha ou se algum dado anterior não existe\n        lastDate = date;\n        lastTime = time;\n        lastActivity = activity;\n    }\n\n    const timeDifference = getTimeDifference(lastTime, time);\n    const dateDifference = getDateDifference(lastDate, date);\n\n    if (timeDifference > 10000 || dateDifference !== 0 || lastActivity !== activity) {\n        if (currentActivity.length > 0) {\n            // Envia a atividade agrupada quando há uma mudança\n            node.send({ payload: currentActivity });\n        }\n        // Reinicia o array para iniciar uma nova atividade\n        currentActivity = [];\n    }\n\n    // Adiciona os dados à atividade atual\n    currentActivity.push(activityData);\n\n    // Atualiza os dados do último registro\n    lastDate = date;\n    lastTime = time;\n    lastActivity = activity;\n}\n\n// Recebe as linhas do CSV\nconst rows = msg.payload; // Supondo que os dados do CSV estejam na mensagem recebida\n\nfor (let i = 1; i < rows.length; i++) {\n    const columns = rows[i].split(';'); // Separando colunas\n\n    const activityData = {\n        date: columns[0],\n        time: columns[1],\n        activity: columns[2],\n        acceleration_x: parseFloat(columns[3]),\n        acceleration_y: parseFloat(columns[4]),\n        acceleration_z: parseFloat(columns[5]),\n        gyro_x: parseFloat(columns[6]),\n        gyro_y: parseFloat(columns[7]),\n        gyro_z: parseFloat(columns[8])\n    };\n\n    processActivity(activityData);\n}\n\n// Envia a última atividade\nif (currentActivity.length > 0) {\n    node.send({ payload: currentActivity });\n}\n\n// Função para calcular a diferença de tempo em milissegundos\nfunction getTimeDifference(time1, time2) {\n    const date1 = new Date(`20${time1.replace(/:/g, '-')}`).getTime(); // Transformando em timestamp\n    const date2 = new Date(`20${time2.replace(/:/g, '-')}`).getTime(); // Transformando em timestamp\n    return Math.abs(date2 - date1);\n}\n\n// Função para calcular a diferença de datas em dias\nfunction getDateDifference(date1, date2) {\n    const dateParts1 = date1.split('/').map(Number); // Convertendo a string em partes numéricas\n    const dateParts2 = date2.split('/').map(Number); // Convertendo a string em partes numéricas\n\n    const d1 = new Date(dateParts1[2], dateParts1[1] - 1, dateParts1[0]); // Criando objeto de data para a primeira data\n    const d2 = new Date(dateParts2[2], dateParts2[1] - 1, dateParts2[0]); // Criando objeto de data para a segunda data\n\n    const difference = Math.abs(d2.getTime() - d1.getTime()); // Calculando a diferença em milissegundos\n    const differenceInDays = Math.ceil(difference / (1000 * 3600 * 24)); // Convertendo para dias\n\n    return differenceInDays;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "9ffe8dafcd435f28",
        "type": "file in",
        "z": "3e315f997a180917",
        "name": "training",
        "filename": "/data/Fitness_training.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 280,
        "y": 320,
        "wires": [
            [
                "3ebcb1b2087973ee"
            ]
        ]
    },
    {
        "id": "3ebcb1b2087973ee",
        "type": "csv",
        "z": "3e315f997a180917",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 450,
        "y": 320,
        "wires": [
            [
                "f2a03e5d9015a12d"
            ]
        ]
    },
    {
        "id": "a7149a4f0d1c14c7",
        "type": "inject",
        "z": "a012a58c042fd2a9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "e91f5b016bc30f01",
        "type": "inject",
        "z": "031fa5fc0fd5aafd",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "2313f275d2af8a0b"
            ]
        ]
    },
    {
        "id": "2313f275d2af8a0b",
        "type": "file in",
        "z": "031fa5fc0fd5aafd",
        "name": "Trainingset",
        "filename": "/data/Fitness_training.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "60438724a528f7ae"
            ]
        ]
    },
    {
        "id": "6baf2ed44be12718",
        "type": "debug",
        "z": "031fa5fc0fd5aafd",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 870,
        "y": 120,
        "wires": []
    },
    {
        "id": "60438724a528f7ae",
        "type": "csv",
        "z": "031fa5fc0fd5aafd",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 490,
        "y": 120,
        "wires": [
            [
                "edc86d87e623b593"
            ]
        ]
    },
    {
        "id": "edc86d87e623b593",
        "type": "function",
        "z": "031fa5fc0fd5aafd",
        "name": "function 2",
        "func": "let currentActivity = [];\nlet lastDate = null;\nlet lastTime = null;\nlet lastActivity = null;\n\nfunction processActivity(activityData) {\n    const date = activityData.date;\n    const time = activityData.time;\n    const activity = activityData.activity;\n\n    if (!lastDate || !lastTime || !lastActivity) {\n        // Se for a primeira linha ou se algum dado anterior não existe\n        lastDate = date;\n        lastTime = time;\n        lastActivity = activity;\n    }\n\n    const timeDifference = getTimeDifference(lastTime, time);\n    const dateDifference = getDateDifference(lastDate, date);\n\n    if (timeDifference > 10000 || dateDifference !== 0 || lastActivity !== activity) {\n        if (currentActivity.length > 0) {\n            // Envia a atividade agrupada quando há uma mudança\n            node.send({ payload: currentActivity });\n        }\n        // Reinicia o array para iniciar uma nova atividade\n        currentActivity = [];\n    }\n\n    // Adiciona os dados à atividade atual\n    currentActivity.push(activityData);\n\n    // Atualiza os dados do último registro\n    lastDate = date;\n    lastTime = time;\n    lastActivity = activity;\n}\n\n// Recebe as linhas do CSV\nconst rows = msg.payload; // Supondo que os dados do CSV estejam na mensagem recebida\n\nfor (let i = 1; i < rows.length; i++) {\n    const columns = rows[i].split(';'); // Separando colunas\n\n    const activityData = {\n        date: columns[0],\n        time: columns[1],\n        activity: columns[2],\n        acceleration_x: parseFloat(columns[3]),\n        acceleration_y: parseFloat(columns[4]),\n        acceleration_z: parseFloat(columns[5]),\n        gyro_x: parseFloat(columns[6]),\n        gyro_y: parseFloat(columns[7]),\n        gyro_z: parseFloat(columns[8])\n    };\n\n    processActivity(activityData);\n}\n\n// Envia a última atividade\nif (currentActivity.length > 0) {\n    node.send({ payload: currentActivity });\n}\n\n// Função para calcular a diferença de tempo em milissegundos\nfunction getTimeDifference(time1, time2) {\n    const date1 = new Date(`20${time1.replace(/:/g, '-')}`).getTime(); // Transformando em timestamp\n    const date2 = new Date(`20${time2.replace(/:/g, '-')}`).getTime(); // Transformando em timestamp\n    return Math.abs(date2 - date1);\n}\n\n// Função para calcular a diferença de datas em dias\nfunction getDateDifference(date1, date2) {\n    const dateParts1 = date1.split('/').map(Number); // Convertendo a string em partes numéricas\n    const dateParts2 = date2.split('/').map(Number); // Convertendo a string em partes numéricas\n\n    const d1 = new Date(dateParts1[2], dateParts1[1] - 1, dateParts1[0]); // Criando objeto de data para a primeira data\n    const d2 = new Date(dateParts2[2], dateParts2[1] - 1, dateParts2[0]); // Criando objeto de data para a segunda data\n\n    const difference = Math.abs(d2.getTime() - d1.getTime()); // Calculando a diferença em milissegundos\n    const differenceInDays = Math.ceil(difference / (1000 * 3600 * 24)); // Convertendo para dias\n\n    return differenceInDays;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 120,
        "wires": [
            [
                "6baf2ed44be12718"
            ]
        ]
    },
    {
        "id": "46cd675a48efe846",
        "type": "inject",
        "z": "a4bf4391a43c73d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 80,
        "wires": [
            [
                "f9cb1b1514d3875b"
            ]
        ]
    },
    {
        "id": "f9cb1b1514d3875b",
        "type": "file in",
        "z": "a4bf4391a43c73d8",
        "name": "",
        "filename": "/data/fit_debug.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "59b1201c14e86486"
            ]
        ]
    },
    {
        "id": "59b1201c14e86486",
        "type": "csv",
        "z": "a4bf4391a43c73d8",
        "name": "",
        "sep": ";",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 80,
        "wires": [
            [
                "7066898bd63befde"
            ]
        ]
    },
    {
        "id": "fa72d207b25a4bec",
        "type": "debug",
        "z": "a4bf4391a43c73d8",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 80,
        "wires": []
    },
    {
        "id": "7066898bd63befde",
        "type": "function",
        "z": "a4bf4391a43c73d8",
        "name": "ProcessData",
        "func": "function processActivity(activityData) {\n\n  const date = activityData.col1;\n  const time = activityData.col2;\n  const activity = parseInt(activityData.col3);\n  const acceleration_x = activityData.col4 ? parseFloat(activityData.col4) : null;\n  const acceleration_y = activityData.col5 ? parseFloat(activityData.col5) : null;\n  const acceleration_z = activityData.col6 ? parseFloat(activityData.col6) : null;\n  const gyro_x = activityData.col7 ? parseFloat(activityData.col7) : null;\n  const gyro_y = activityData.col8 ? parseFloat(activityData.col8) : null;\n  const gyro_z = activityData.col9 ? parseFloat(activityData.col9) : null;\n\n  node.warn(`Incoming data: date=${date}, time=${time}, activity=${activity}`);\n  node.warn(`Current state: lastDate=${context.get('lastDate')}, lastTime=${context.get('lastTime')}, lastActivity=${context.get('lastActivity')}`);\n\n  // Use context variable for currentActivity array\n  let currentActivity = context.get('currentActivity') || [];\n\n  if (context.get('lastDate') === undefined || context.get('lastTime') === undefined || context.get('lastActivity') === undefined) {\n      context.set('lastDate', date);\n      context.set('lastTime', time);\n      context.set('lastActivity', activity);\n  } else {  \n      const timeDifference = getTimeDifference(context.get('lastTime'), time);\n      const dateDifference = getDateDifference(context.get('lastDate'), date);\n      node.warn('timediff:' + timeDifference + ' ' + 'datedif:' + dateDifference);\n      if (timeDifference > 1000 || dateDifference !== 0 || context.get('lastActivity') !== activity) {\n          if (currentActivity.length > 0) {\n              node.send({ payload: currentActivity });\n              currentActivity = [];\n              node.warn(\"Data sent and currentActivity array reset.\");\n          }\n      }\n\n      currentActivity.push({\n          date,\n          time,\n          activity,\n          acceleration_x,\n          acceleration_y,\n          acceleration_z,\n          gyro_x,\n          gyro_y,\n          gyro_z\n      });\n\n      context.set('lastDate', date);\n      context.set('lastTime', time);\n      context.set('lastActivity', activity);\n      node.warn('Group Data:' + context.get('lastDate') + 'time:' + context.get('lastTime'));\n  }\n\n  // Update context variable\n  context.set('currentActivity', currentActivity);\n}\n\nconst csvData = msg.payload;\nprocessActivity(csvData);\n\nfunction getTimeDifference(time1, time2) {\n  const timeParts1 = time1.split(':').map(Number);\n  const timeParts2 = time2.split(':').map(Number);\n\n  const date1 = new Date(2023, 6, 1, timeParts1[0], timeParts1[1], timeParts1[2]).getTime();\n  const date2 = new Date(2023, 6, 1, timeParts2[0], timeParts2[1], timeParts2[2]).getTime();\n\n  return Math.abs(date2 - date1);\n}\n\n\nfunction getDateDifference(date1, date2) {\n  node.warn(date1 + \"-\" + date2);\n  const dateParts1 = date1.split('/').map(Number);\n  const dateParts2 = date2.split('/').map(Number);\n\n  const d1 = new Date(dateParts1[2], dateParts1[1] - 1, dateParts1[0]);\n  const d2 = new Date(dateParts2[2], dateParts2[1] - 1, dateParts2[0]);\n\n  const difference = Math.abs(d2.getTime() - d1.getTime());\n  const differenceInDays = Math.ceil(difference / (1000 * 3600 * 24));\n\n  return differenceInDays;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 80,
        "wires": [
            [
                "fa72d207b25a4bec"
            ]
        ]
    }
]