[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3e315f997a180917",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a012a58c042fd2a9",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "037aecdc6926ce9a",
        "type": "mqtt-broker",
        "name": "IdC",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f5279b01.b328d8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "72f114b81c497b2b",
        "type": "ui_group",
        "name": "dash1",
        "tab": "",
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "85ee7547c83fb2fb",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 460,
        "wires": []
    },
    {
        "id": "966177e57dbd7d21",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "idc/iris",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "037aecdc6926ce9a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 640,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "b5f343a20278eea1",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "Predict Service",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://app:8000/predict",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 420,
        "y": 460,
        "wires": [
            [
                "85ee7547c83fb2fb"
            ]
        ]
    },
    {
        "id": "79f05988ab6ded28",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "55d85d4957c06c5e"
            ]
        ]
    },
    {
        "id": "305b9fa387c77222",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 220,
        "wires": []
    },
    {
        "id": "55d85d4957c06c5e",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "Health Service",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://app:8000/health",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "305b9fa387c77222"
            ]
        ]
    },
    {
        "id": "bd0817e58c32174a",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-KNN",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-KNN\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "15dc23581e715dea",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-GNB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-GNB\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "1b4c1fc9240a787b",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-SVC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-SVC\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "5d7fa6dbca76c986",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-DT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-DT\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "fa76cd47cd404c07",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-LDA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-LDA\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "e2c8d2430fd78714",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Iris-LR",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"iris-LR\"},{\"SepalLengthCm\":5.9,\"SepalWidthCm\":3,\"PetalLengthCm\":5.1,\"PetalWidthCm\":1}]",
        "payloadType": "json",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "3356cfc43df2ac06",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Fitness-LDA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"model\":\"fitness-LDA\"},{\"acceleration_x\":0.265,\"acceleration_y\":-0.7814,\"acceleration_z\":-0.0076,\"gyro_x\":-0.059,\"gyro_y\":0.0325,\"gyro_z\":-2.9296}]",
        "payloadType": "json",
        "x": 370,
        "y": 680,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "184928afc794ea46",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "idc/fitness",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "037aecdc6926ce9a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 340,
        "y": 740,
        "wires": [
            [
                "b5f343a20278eea1"
            ]
        ]
    },
    {
        "id": "ca3b2e0596e19eb3",
        "type": "mqtt in",
        "z": "3e315f997a180917",
        "name": "",
        "topic": "idc/fitness",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "037aecdc6926ce9a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 60,
        "wires": [
            [
                "f2a03e5d9015a12d"
            ]
        ]
    },
    {
        "id": "4e4532788782c67a",
        "type": "http request",
        "z": "3e315f997a180917",
        "name": "Predict Service",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://app:8000/predict",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 240,
        "y": 140,
        "wires": [
            [
                "f2a03e5d9015a12d"
            ]
        ]
    },
    {
        "id": "f2a03e5d9015a12d",
        "type": "debug",
        "z": "3e315f997a180917",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 60,
        "wires": []
    },
    {
        "id": "cea13b5b1952c19f",
        "type": "inject",
        "z": "3e315f997a180917",
        "name": "START",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Run python script",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 480,
        "wires": [
            [
                "9ffe8dafcd435f28"
            ]
        ]
    },
    {
        "id": "9f7413c6b42a4d86",
        "type": "function",
        "z": "3e315f997a180917",
        "name": "function 1",
        "func": "const rows = msg.payload; \nconst activities = [];\nlet currentActivity = [];\n\nfor (let i = 1; i < rows.length; i++) { // Começa do índice 1 para ignorar o cabeçalho\n    const columns = rows[i].split(';'); // Separando colunas\n    const date = columns[0]; // Considerando a coluna de data\n    const time = columns[1]; // Considerando a coluna de tempo\n    const activity = columns[2]; // Considerando a coluna de tipo de atividade\n\n\n    currentActivity.push({\n        date: date,\n        time: time,\n        acceleration_x: parseFloat(columns[3]),\n        acceleration_y: parseFloat(columns[4]),\n        acceleration_z: parseFloat(columns[5]),\n        gyro_x: parseFloat(columns[6]),\n        gyro_y: parseFloat(columns[7]),\n        gyro_z: parseFloat(columns[8])\n    });\n}\n\nnode.send({ payload: activities });\n\n\n// Lendo o arquivo\nfs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n        node.error(err);\n    } else {\n        // Processando os dados lidos (separando por mudança de tempo, data ou tipo de atividade)\n        const rows = data.split('\\n'); // Separando linhas do CSV\n        const activities = [];\n       let currentActivity = [];\n\n        //  Iterando sobre as linhas do CSV\n        for (let i = 1; i < rows.length; i++) { // Começa do índice 1 para ignorar o cabeçalho\n            const columns = rows[i].split(';'); // Separando colunas\n            const date = columns[0]; // Considerando a coluna de data\n            const time = columns[1]; // Considerando a coluna de tempo\n            const activity = columns[2]; // Considerando a coluna de tipo de atividade\n\n            // Verificando a diferença de tempo, data ou tipo de atividade\n            if (i > 1) {\n                const previousColumns = rows[i - 1].split(';');\n                const previousDate = previousColumns[0];\n                const previousTime = previousColumns[1];\n                const previousActivity = previousColumns[2];\n\n                // Defina aqui suas condições para mudança de atividade (exemplo: diferença de tempo e/ou data e/ou tipo de atividade diferente)\n                const timeDifference = getTimeDifference(previousTime, time); // Função para calcular a diferença de tempo\n                const dateDifference = getDateDifference(previousDate, date); // Função para calcular a diferença de data\n\n                // Se alguma das condições indicar uma nova atividade, separa os dados\n                if (timeDifference > 10000 || dateDifference !== 0 || previousActivity !== activity) {\n                    activities.push(currentActivity);\n                    currentActivity = [];\n                }\n            }\n\n            // Formatando os dados como desejado e adicionando à atividade atual\n            currentActivity.push({\n                date: date,\n                time: time,\n                acceleration_x: parseFloat(columns[3]),\n                acceleration_y: parseFloat(columns[4]),\n                acceleration_z: parseFloat(columns[5]),\n                gyro_x: parseFloat(columns[6]),\n                gyro_y: parseFloat(columns[7]),\n                gyro_z: parseFloat(columns[8])\n            });\n        }\n\n        // Enviando as atividades separadas como saída do Node-RED\n        for (const activity of activities) {\n            node.send({ payload: activity });\n        }\n    }\n});\n\n// Função para calcular a diferença de tempo em milissegundos\nfunction getTimeDifference(time1, time2) {\n    const date1 = new Date(`20${time1.replace(/:/g, '-')}`).getTime(); // Transformando em timestamp\n    const date2 = new Date(`20${time2.replace(/:/g, '-')}`).getTime(); // Transformando em timestamp\n    return Math.abs(date2 - date1);\n}\n\n// Função para calcular a diferença de datas em dias\nfunction getDateDifference(date1, date2) {\n    const dateParts1 = date1.split('/').map(Number); // Convertendo a string em partes numéricas\n    const dateParts2 = date2.split('/').map(Number); // Convertendo a string em partes numéricas\n\n    const d1 = new Date(dateParts1[2], dateParts1[1] - 1, dateParts1[0]); // Criando objeto de data para a primeira data\n    const d2 = new Date(dateParts2[2], dateParts2[1] - 1, dateParts2[0]); // Criando objeto de data para a segunda data\n\n    const difference = Math.abs(d2.getTime() - d1.getTime()); // Calculando a diferença em milissegundos\n    const differenceInDays = Math.ceil(difference / (1000 * 3600 * 24)); // Convertendo para dias\n\n    return differenceInDays;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 9,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "9ffe8dafcd435f28",
        "type": "file in",
        "z": "3e315f997a180917",
        "name": "training",
        "filename": "/data/Fitness_training.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 260,
        "y": 480,
        "wires": [
            [
                "3ebcb1b2087973ee"
            ]
        ]
    },
    {
        "id": "3ebcb1b2087973ee",
        "type": "csv",
        "z": "3e315f997a180917",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 450,
        "y": 480,
        "wires": [
            [
                "f2a03e5d9015a12d"
            ]
        ]
    },
    {
        "id": "a7149a4f0d1c14c7",
        "type": "inject",
        "z": "a012a58c042fd2a9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 100,
        "wires": [
            []
        ]
    }
]